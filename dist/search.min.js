const e=e=>["",...e,""],n=(e,n=3)=>e.slice(n-1).map(((_,t)=>e.slice(t,t+n).join(""))),t=({entries:t,index:o={},filter:s,transform:r=(e=>e)})=>{for(let l=0;l<t.length;l++){const i=t[l],c=n(e(""+i),3);for(let e=0;e<c.length;e++){const n=r(c[e]);s&&!s.test(n)||(o[n]||(o[n]=[]),o[n].push(l))}}return o},o=(t,o,s={})=>{const r=n(e(o),3);for(let e=0;e<r.length;e++){const n=t[r[e]];if(n)for(let e=0;e<n.length;e++){const t=n[e];s[t]||(s[t]=0),s[t]++}}return Object.entries(s).sort(((e,n)=>n[1]-e[1]))};export{t as ingest,o as search};import{readFileSync as s}from"fs";let r=s("/Users/potch/data/wiki/h2g2.json").toString("utf8");r=r.split(/\n+/),r=r.reduce(((e,n)=>{if(!(n=n.trim()))return e;try{e.push(JSON.parse(n))}catch(e){console.log("failed on [["+n+"]]")}return e}),[]),console.log(r.length);const l=r.map((e=>e.name));console.log("ingesting amount: ",l.length),new RegExp("[\\w-]{3}"),console.time("ingest");let i=t({entries:l,transform:e=>e.toLowerCase()});console.timeEnd("ingest"),console.log("hwg"),console.log("\nindex size:\t",JSON.stringify(i).length,"\nsource size:\t",JSON.stringify(r).length);const c=process.argv.at(-1);console.time("search"),console.log(`\nsearching for: "${c}"\n`),console.log(o(i,c).map((e=>{let n=r[e[0]];return e[1]+": "+n.name+"\n"+n.url})).slice(0,30).join("\n")),console.timeEnd("search");
