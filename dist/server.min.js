import{Server as e}from"node:http";const t=(e,t)=>e instanceof RegExp?e:t,r=(e=[])=>({handle(r,s){const n=t(r)||new RegExp("^"+r.replace(/\[([^\]]+)\]/g,((_,e)=>`(?<${e}>[^\\/]+)`))+"$");e.push({path:r,pattern:n,handler:s})},route:t=>e.reduce(((e,r)=>{const s=r.pattern.exec(t);return s?[...e,{...r,params:s.groups}]:e}),[])});class s extends e{constructor({host:e=new URL("http://localhost:8080/"),routes:t=[]}={}){super(((e,t)=>this.handler(e,t).catch(console.error))),Object.assign(this,r(t),{host:e})}async handler(e,t){e.url=new URL(e.url,this.host);const{pathname:r}=e.url,s=[],n=e.method+":"+r,o=this.route(n);e.body=new Promise((t=>{e.on("data",(e=>s.push(e))),e.on("end",(()=>t(Buffer.concat(s))))}));for(let{handler:r,params:s}of o)if(e.params=s,await(r?.(e,t)),t.writableEnded)return}get(e,r){this.handle(t(e,"GET:"+e),r)}post(e,r){this.handle(t(e,"POST:"+e),r)}listen(){return new Promise((e=>super.listen(this.host.port,e)))}}export{r as router,s as Server};
